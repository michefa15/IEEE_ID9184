# -*- coding: utf-8 -*-
"""TCC_StockNormalize.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KvYLwVbdmu2V_K9yEzYf_4RsLh-O2D2t
"""

import pandas as pd
import matplotlib.pyplot as plt

def plot_graph(df, column='close'):
  plt.figure(figsize=(10,4))

  df[column].plot()

  plt.title(column)
  plt.xlabel('Date')
  plt.ylabel(column)

def normalize_stock(df,filename='none'):
  df_clone = df.copy(deep=True)
  cols_to_norm = ['high','low','open','close','volume']
  df_clone[cols_to_norm] = df_clone[cols_to_norm].apply(lambda x: (x - x.min()) / (x.max() - x.min()))
  if filename != 'none':
    df_clone.to_csv('norm_'+filename, sep=',', index=False)
  return df_clone

def calc_mms(df, n, columns=['close'], cut_n_first = False, filename='none'):
  row_size = len(df.index)
  close_mms = df.copy(deep=True)

  for col in columns:
    mms = df.loc[n, col]
    close_mms.loc[n, col] = mms
    mult = (2/(n+1))
    for i in range(n, row_size):
      sum = 0
      count = 0
      for j in range(i-n, i):
        sum += df.loc[j, col]
        count += 1
      close_mms.loc[j, col] = sum/n

  if cut_n_first == True:
    close_mms.drop(index=close_mms.index[:n],
          axis=0,
          inplace=True)

  if filename != 'none':
    close_mms.to_csv('mms'+str(n)+'_'+filename, sep=',', index=False)
  return close_mms

def calc_mme(df, n, columns=['close'], cut_n_first = False, filename='none'):
  row_size = len(df.index)
  close_mme = df.copy(deep=True)

  for col in columns:
    mme = df.loc[n, col]
    close_mme.loc[n, col] = mme
    mult = (2/(n+1))

    #for i in range(0, n+1):
    #  close_mme.loc[i, col] = 0

    for i in range(n+1, row_size):
      mme = ((df.loc[i, col]-mme)*mult)+mme
      close_mme.loc[i, col] = mme

  if cut_n_first == True:
    close_mme.drop(index=close_mme.index[:n],
          axis=0,
          inplace=True)

  if filename != 'none':
    close_mme.to_csv('mme'+str(n)+'_'+filename, sep=',', index=False)

  return close_mme

# normalizada
# mms
# mme
# mms normalizada
# mme normalizada

def stock_valuation(filename):
  n = 30
  df = pd.read_csv(filename)
  normalize_stock(df, filename=filename)
  mms = calc_mms(df, 30, ['high','low','open','close','volume'], cut_n_first=True, filename=filename)
  mme = calc_mme(df, 30, ['high','low','open','close','volume'], cut_n_first=True, filename=filename)
  normalize_stock(mms, filename='mms'+str(n)+'_'+filename)
  normalize_stock(mme, filename='mme'+str(n)+'_'+filename)

"""# RUNS"""

stock_valuation('stock_PETR4.SA_2008-01-01_2022-09-20.csv')

"""# TESTS"""

ffnormfiles = [ 'stock_ABEV3.SA_2008-01-01_2022-09-20.csv',
                'stock_VALE3.SA_2008-01-01_2022-09-20.csv',
                'stock_ITUB4.SA_2008-01-01_2022-09-20.csv',
                'stock_BBDC4.SA_2008-01-01_2022-09-20.csv']

for normitem in ffnormfiles:
  normalize_stock(pd.read_csv(normitem), normitem)

dff = pd.read_csv('stock_PETR4.SA_2011-01-01_2022-01-01.csv')
#dff = normalize_stock('stock_PETR4.SA_2011-01-01_2022-01-01.csv')
#dff = normalize_stock(pd.read_csv('stock_PETR4.SA_2011-01-01_2022-01-01.csv'))
#mmss = normalize_stock(calc_mms(dff, 1, ['close']))
#mmee = normalize_stock(calc_mme(dff, 1, ['close']))

mmss = calc_mms(dff, 30, ['close'], cut_n_first=True)
mmee = calc_mme(dff, 30, ['close'], cut_n_first=True)

plot_graph(dff, 'close')
plot_graph(mmss, 'close')
plot_graph(mmee, 'close')